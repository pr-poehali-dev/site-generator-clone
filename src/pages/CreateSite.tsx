
import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Separator } from "@/components/ui/separator";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import Navbar from "@/components/Navbar";
import Footer from "@/components/Footer";
import { Send, Sparkles, Code, Globe, Copy, Download, Check, RefreshCw, ExternalLink, Loader2 } from "lucide-react";

type Message = {
  id: string;
  role: "user" | "assistant";
  content: string;
  timestamp: Date;
};

type SitePreview = {
  id: string;
  title: string;
  description: string;
  domain: string;
  htmlContent: string;
  cssContent: string;
  jsContent: string;
  colors: string[];
  published: boolean;
};

// –ò–º–∏—Ç–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
class CodeGenerationModel {
  private static instance: CodeGenerationModel;
  private isLoaded: boolean = false;
  private loadingPromise: Promise<void> | null = null;

  private constructor() {
    this.loadingPromise = new Promise((resolve) => {
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
      setTimeout(() => {
        this.isLoaded = true;
        resolve();
      }, 2000);
    });
  }

  public static getInstance(): CodeGenerationModel {
    if (!CodeGenerationModel.instance) {
      CodeGenerationModel.instance = new CodeGenerationModel();
    }
    return CodeGenerationModel.instance;
  }

  public async waitForLoad(): Promise<void> {
    return this.loadingPromise || Promise.resolve();
  }

  public async generateHTML(prompt: string): Promise<string> {
    if (!this.isLoaded) {
      await this.waitForLoad();
    }
    
    // –ü—Ä–æ—Å—Ç—ã–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞
    const titleMatch = prompt.match(/([a-z–∞-—è—ë\s]+)/i);
    const title = titleMatch ? titleMatch[0].trim() : "–ú–æ–π —Å–∞–π—Ç";
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–∞–π—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const isLanding = prompt.toLowerCase().includes("–ª–µ–Ω–¥–∏–Ω–≥");
    const isCafe = prompt.toLowerCase().includes("–∫–æ—Ñ–µ–π–Ω") || prompt.toLowerCase().includes("–∫–∞—Ñ–µ");
    const isPortfolio = prompt.toLowerCase().includes("–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ") || prompt.toLowerCase().includes("—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ");
    const isIT = prompt.toLowerCase().includes("it") || prompt.toLowerCase().includes("–∫–æ–º–ø–∞–Ω–∏");
    
    let html = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <div class="container">
            <nav>
                <div class="logo">${title}</div>
                <ul class="menu">
                    <li><a href="#main">–ì–ª–∞–≤–Ω–∞—è</a></li>
                    <li><a href="#about">–û –Ω–∞—Å</a></li>`;
    
    if (isCafe) {
      html += `
                    <li><a href="#menu">–ú–µ–Ω—é</a></li>`;
    } else if (isPortfolio) {
      html += `
                    <li><a href="#gallery">–ì–∞–ª–µ—Ä–µ—è</a></li>`;
    } else if (isIT) {
      html += `
                    <li><a href="#services">–£—Å–ª—É–≥–∏</a></li>`;
    }
    
    html += `
                    <li><a href="#contacts">–ö–æ–Ω—Ç–∞–∫—Ç—ã</a></li>
                </ul>
            </nav>
        </div>
    </header>
    
    <section id="main" class="hero">
        <div class="container">
            <h1>${title}</h1>
            <p>${this.generateDescription(prompt)}</p>
            <button class="cta-button">–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏</button>
        </div>
    </section>`;
    
    if (isCafe) {
      html += `
    <section id="menu" class="section">
        <div class="container">
            <h2>–ù–∞—à–µ –º–µ–Ω—é</h2>
            <div class="menu-grid">
                <div class="menu-item">
                    <h3>–≠—Å–ø—Ä–µ—Å—Å–æ</h3>
                    <p>–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π –∫–æ—Ñ–µ</p>
                    <span class="price">200 ‚ÇΩ</span>
                </div>
                <div class="menu-item">
                    <h3>–ö–∞–ø—É—á–∏–Ω–æ</h3>
                    <p>–≠—Å–ø—Ä–µ—Å—Å–æ —Å –º–æ–ª–æ—á–Ω–æ–π –ø–µ–Ω–∫–æ–π</p>
                    <span class="price">300 ‚ÇΩ</span>
                </div>
                <div class="menu-item">
                    <h3>–õ–∞—Ç—Ç–µ</h3>
                    <p>–ö–æ—Ñ–µ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–æ–ª–æ–∫–∞</p>
                    <span class="price">280 ‚ÇΩ</span>
                </div>
            </div>
        </div>
    </section>`;
    } else if (isPortfolio) {
      html += `
    <section id="gallery" class="section">
        <div class="container">
            <h2>–ú–æ–∏ —Ä–∞–±–æ—Ç—ã</h2>
            <div class="gallery-grid">
                <div class="gallery-item"><div class="placeholder"></div></div>
                <div class="gallery-item"><div class="placeholder"></div></div>
                <div class="gallery-item"><div class="placeholder"></div></div>
                <div class="gallery-item"><div class="placeholder"></div></div>
                <div class="gallery-item"><div class="placeholder"></div></div>
                <div class="gallery-item"><div class="placeholder"></div></div>
            </div>
        </div>
    </section>`;
    } else if (isIT) {
      html += `
    <section id="services" class="section">
        <div class="container">
            <h2>–ù–∞—à–∏ —É—Å–ª—É–≥–∏</h2>
            <div class="services-grid">
                <div class="service-item">
                    <div class="service-icon">üíª</div>
                    <h3>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–æ–≤</h3>
                    <p>–°–æ–∑–¥–∞–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–µ–±-—Å–∞–π—Ç—ã –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥ –∫–ª—é—á</p>
                </div>
                <div class="service-item">
                    <div class="service-icon">üì±</div>
                    <h3>–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h3>
                    <p>–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è iOS –∏ Android</p>
                </div>
                <div class="service-item">
                    <div class="service-icon">üîç</div>
                    <h3>SEO-–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ</h3>
                    <p>–ü–æ–≤—ã—à–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞ –≤ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö</p>
                </div>
            </div>
        </div>
    </section>`;
    }
    
    html += `
    <section id="about" class="section">
        <div class="container">
            <h2>–û –Ω–∞—Å</h2>
            <p>${this.generateAbout(prompt)}</p>
        </div>
    </section>
    
    <section id="contacts" class="section">
        <div class="container">
            <h2>–ö–æ–Ω—Ç–∞–∫—Ç—ã</h2>
            <div class="contact-form">
                <div class="form-group">
                    <label for="name">–ò–º—è</label>
                    <input type="text" id="name" placeholder="–í–∞—à–µ –∏–º—è">
                </div>
                <div class="form-group">
                    <label for="email">Email</label>
                    <input type="email" id="email" placeholder="–í–∞—à email">
                </div>
                <div class="form-group">
                    <label for="message">–°–æ–æ–±—â–µ–Ω–∏–µ</label>
                    <textarea id="message" placeholder="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"></textarea>
                </div>
                <button type="submit" class="submit-button">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </div>
        </div>
    </section>
    
    <footer>
        <div class="container">
            <p>&copy; 2023 ${title}. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
        </div>
    </footer>
    
    <script src="script.js"></script>
</body>
</html>`;
    
    return html;
  }
  
  public async generateCSS(prompt: string): Promise<string> {
    if (!this.isLoaded) {
      await this.waitForLoad();
    }
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–∞–π—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const isCafe = prompt.toLowerCase().includes("–∫–æ—Ñ–µ–π–Ω") || prompt.toLowerCase().includes("–∫–∞—Ñ–µ");
    const isPortfolio = prompt.toLowerCase().includes("–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ") || prompt.toLowerCase().includes("—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ");
    const isIT = prompt.toLowerCase().includes("it") || prompt.toLowerCase().includes("–∫–æ–º–ø–∞–Ω–∏");
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–∞–π—Ç–∞
    let primaryColor = "#9b87f5";
    let secondaryColor = "#7E69AB";
    let accentColor = "#F2FCE2";
    
    if (isCafe) {
      primaryColor = "#6F4E37";
      secondaryColor = "#A67B5B";
      accentColor = "#F9F3DF";
    } else if (isPortfolio) {
      primaryColor = "#333333";
      secondaryColor = "#555555";
      accentColor = "#EEEEEE";
    } else if (isIT) {
      primaryColor = "#1EAEDB";
      secondaryColor = "#0FA0CE";
      accentColor = "#F6F6F7";
    }
    
    return `* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: #333;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}

/* Header */
header {
    background-color: #fff;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    position: sticky;
    top: 0;
    z-index: 100;
}

nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 0;
}

.logo {
    font-size: 24px;
    font-weight: 700;
    color: ${primaryColor};
}

.menu {
    display: flex;
    list-style: none;
}

.menu li {
    margin-left: 30px;
}

.menu a {
    text-decoration: none;
    color: #333;
    font-weight: 500;
    transition: color 0.3s;
}

.menu a:hover {
    color: ${primaryColor};
}

/* Hero Section */
.hero {
    background: linear-gradient(to right, ${primaryColor}, ${secondaryColor});
    color: white;
    padding: 100px 0;
    text-align: center;
}

.hero h1 {
    font-size: 48px;
    margin-bottom: 20px;
}

.hero p {
    font-size: 18px;
    max-width: 600px;
    margin: 0 auto 30px;
}

.cta-button {
    background-color: white;
    color: ${primaryColor};
    border: none;
    padding: 15px 30px;
    font-size: 16px;
    font-weight: 600;
    border-radius: 5px;
    cursor: pointer;
    transition: all 0.3s;
}

.cta-button:hover {
    background-color: ${accentColor};
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
}

/* Sections */
.section {
    padding: 80px 0;
}

h2 {
    font-size: 36px;
    margin-bottom: 40px;
    text-align: center;
    color: ${primaryColor};
}

${
  isCafe ? `
/* Menu Section */
.menu-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 30px;
}

.menu-item {
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
    padding: 30px;
    transition: transform 0.3s;
}

.menu-item:hover {
    transform: translateY(-5px);
}

.menu-item h3 {
    font-size: 22px;
    margin-bottom: 10px;
    color: ${primaryColor};
}

.menu-item p {
    color: #666;
    margin-bottom: 15px;
}

.price {
    font-weight: 700;
    font-size: 18px;
    color: ${primaryColor};
}
` : isPortfolio ? `
/* Gallery Section */
.gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
}

.gallery-item {
    aspect-ratio: 3/2;
    overflow: hidden;
    border-radius: 8px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
}

.placeholder {
    width: 100%;
    height: 100%;
    background-color: #eee;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #aaa;
}

.placeholder::after {
    content: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
    font-size: 14px;
}
` : isIT ? `
/* Services Section */
.services-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 30px;
}

.service-item {
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
    padding: 30px;
    text-align: center;
    transition: transform 0.3s;
}

.service-item:hover {
    transform: translateY(-5px);
}

.service-icon {
    font-size: 48px;
    margin-bottom: 20px;
}

.service-item h3 {
    font-size: 22px;
    margin-bottom: 15px;
    color: ${primaryColor};
}

.service-item p {
    color: #666;
}
` : ``
}

/* Contact Form */
.contact-form {
    max-width: 600px;
    margin: 0 auto;
}

.form-group {
    margin-bottom: 20px;
}

label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
}

input, textarea {
    width: 100%;
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 16px;
}

textarea {
    min-height: 150px;
    resize: vertical;
}

.submit-button {
    background-color: ${primaryColor};
    color: white;
    border: none;
    padding: 15px 30px;
    font-size: 16px;
    font-weight: 600;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.submit-button:hover {
    background-color: ${secondaryColor};
}

/* Footer */
footer {
    background-color: #333;
    color: white;
    padding: 30px 0;
    text-align: center;
}

/* Responsive */
@media (max-width: 768px) {
    .menu {
        display: none;
    }
    
    .hero h1 {
        font-size: 36px;
    }
    
    .hero p {
        font-size: 16px;
    }
}`;
  }
  
  public async generateJS(): Promise<string> {
    if (!this.isLoaded) {
      await this.waitForLoad();
    }
    
    return `document.addEventListener('DOMContentLoaded', function() {
    // Smooth scrolling for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
            e.preventDefault();
            
            const targetId = this.getAttribute('href');
            const targetElement = document.querySelector(targetId);
            
            if (targetElement) {
                window.scrollTo({
                    top: targetElement.offsetTop - 70,
                    behavior: 'smooth'
                });
            }
        });
    });
    
    // Form submission
    const contactForm = document.querySelector('.contact-form');
    if (contactForm) {
        contactForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const nameInput = document.getElementById('name');
            const emailInput = document.getElementById('email');
            const messageInput = document.getElementById('message');
            
            if (nameInput.value && emailInput.value && messageInput.value) {
                alert('–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
                nameInput.value = '';
                emailInput.value = '';
                messageInput.value = '';
            } else {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã.');
            }
        });
    }
    
    // Add some animation for elements when they scroll into view
    const observerOptions = {
        root: null,
        rootMargin: '0px',
        threshold: 0.1
    };
    
    const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
                observer.unobserve(entry.target);
            }
        });
    }, observerOptions);
    
    document.querySelectorAll('.section').forEach(section => {
        observer.observe(section);
    });
});

// Add fade-in class for animation
document.querySelectorAll('.section').forEach(section => {
    section.classList.add('fade-in');
});

// Add some styles for animations
const style = document.createElement('style');
style.textContent = \`
    .fade-in {
        opacity: 0;
        transform: translateY(20px);
        transition: opacity 0.6s ease-out, transform 0.6s ease-out;
    }
    
    .fade-in.visible {
        opacity: 1;
        transform: translateY(0);
    }
\`;
document.head.appendChild(style);`;
  }
  
  private generateDescription(prompt: string): string {
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–∞–π—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if (prompt.toLowerCase().includes("–∫–æ—Ñ–µ–π–Ω") || prompt.toLowerCase().includes("–∫–∞—Ñ–µ")) {
      return "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ª—É—á—à–∏–π –∫–æ—Ñ–µ –≤ –≥–æ—Ä–æ–¥–µ, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Å –ª—é–±–æ–≤—å—é –∏ –∑–∞–±–æ—Ç–æ–π –æ –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏. –£—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –±–∞—Ä–∏—Å—Ç–∞ –∂–¥—É—Ç –≤–∞—Å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.";
    } else if (prompt.toLowerCase().includes("–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ") || prompt.toLowerCase().includes("—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ")) {
      return "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ—Å—ä–µ–º–∫–∞ –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –°–æ–∑–¥–∞—é –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –∫–∞–¥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è —Å –≤–∞–º–∏ –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å. –ü–æ—Ä—Ç—Ä–µ—Ç—ã, —Å–≤–∞–¥—å–±—ã, —Ä–µ–ø–æ—Ä—Ç–∞–∂–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.";
    } else if (prompt.toLowerCase().includes("it") || prompt.toLowerCase().includes("–∫–æ–º–ø–∞–Ω–∏")) {
      return "–ú—ã —Å–æ–∑–¥–∞–µ–º –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ IT-—Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –±–∏–∑–Ω–µ—Å—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ –≥–æ—Ç–æ–≤–∞ —Ä–µ—à–∏—Ç—å –ª—é–±—É—é –∑–∞–¥–∞—á—É.";
    } else {
      return "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É. –ù–∞—à–∞ —Ü–µ–ª—å - –≤–∞—à —É—Å–ø–µ—Ö –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ —Å –Ω–∞–º–∏.";
    }
  }
  
  private generateAbout(prompt: string): string {
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–∞–π—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if (prompt.toLowerCase().includes("–∫–æ—Ñ–µ–π–Ω") || prompt.toLowerCase().includes("–∫–∞—Ñ–µ")) {
      return "–ù–∞—à–∞ –∫–æ—Ñ–µ–π–Ω—è –±—ã–ª–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –≤ 2018 –≥–æ–¥—É –≥—Ä—É–ø–ø–æ–π —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤, –≤–ª—é–±–ª–µ–Ω–Ω—ã—Ö –≤ –∫–æ—Ñ–µ. –ú—ã –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ –∑–µ—Ä–Ω–∞ —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞ –∏ –æ–±–∂–∞—Ä–∏–≤–∞–µ–º –∏—Ö –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ. –ö–∞–∂–¥–∞—è —á–∞—à–∫–∞ –∫–æ—Ñ–µ - —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—à–µ–π —Å—Ç—Ä–∞—Å—Ç–∏ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º–∞. –ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–µ–º —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏, –∏–∑—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∏ —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –≤–∞—à –¥–µ–Ω—å –ª—É—á—à–µ —Å –∫–∞–∂–¥—ã–º –≥–ª–æ—Ç–∫–æ–º –Ω–∞—à–µ–≥–æ –∫–æ—Ñ–µ.";
    } else if (prompt.toLowerCase().includes("–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ") || prompt.toLowerCase().includes("—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ")) {
      return "–Ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ —Å –±–æ–ª–µ–µ —á–µ–º 8-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∂–∞–Ω—Ä–∞—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ú–æ—è —Å—Ç—Ä–∞—Å—Ç—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞—á–∞–ª–∞—Å—å –µ—â–µ –≤ –¥–µ—Ç—Å—Ç–≤–µ –∏ —Å —Ç–µ—Ö –ø–æ—Ä –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–∞—Å—å –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é. –Ø –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–µ–º–ª—é—Å—å –∑–∞–ø–µ—á–∞—Ç–ª–µ—Ç—å –Ω–µ –ø—Ä–æ—Å—Ç–æ –º–æ–º–µ–Ω—Ç—ã, –∞ —ç–º–æ—Ü–∏–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ—è—Ç –∑–∞ –∫–∞–∂–¥—ã–º –∫–∞–¥—Ä–æ–º. –ú–æ—è —Ä–∞–±–æ—Ç–∞ - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —É—Å–ª—É–≥–∞, —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è —Å –≤–∞–º–∏ –Ω–∞–≤—Å–µ–≥–¥–∞.";
    } else if (prompt.toLowerCase().includes("it") || prompt.toLowerCase().includes("–∫–æ–º–ø–∞–Ω–∏")) {
      return "–ù–∞—à–∞ IT-–∫–æ–º–ø–∞–Ω–∏—è –±—ã–ª–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –≤ 2015 –≥–æ–¥—É –∫–æ–º–∞–Ω–¥–æ–π –æ–ø—ã—Ç–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤. –ó–∞ –≥–æ–¥—ã —Ä–∞–±–æ—Ç—ã –º—ã —É—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª–∏ –±–æ–ª–µ–µ 200 –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π –±–∏–∑–Ω–µ—Å–∞. –ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±-—Å–∞–π—Ç–æ–≤, –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö IT-—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –±–∏–∑–Ω–µ—Å–∞. –ù–∞—à–∞ –º–∏—Å—Å–∏—è - —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Å—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.";
    } else {
      return "–ú—ã –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏. –ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –±—ã–ª–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ —Å —Ü–µ–ª—å—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥ –∏ —Ä–µ—à–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–æ—Å—Ç–∏–≥–∞—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π. –ú—ã –≤–µ—Ä–∏–º –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–µ–∫—Ç—É –∏ —Å—Ç—Ä–µ–º–∏–º—Å—è –∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º—É —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—é –Ω–∞—à–∏—Ö —É—Å–ª—É–≥. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å –Ω–∞–º, –∏ –º—ã –ø—Ä–µ–≤–∑–æ–π–¥–µ–º –≤–∞—à–∏ –æ–∂–∏–¥–∞–Ω–∏—è!";
    }
  }
}

const CreateSite = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [progressValue, setProgressValue] = useState(0);
  const [generationStep, setGenerationStep] = useState(0);
  const [sitePreview, setSitePreview] = useState<SitePreview | null>(null);
  const [showCopied, setShowCopied] = useState(false);
  const [activeTab, setActiveTab] = useState("html");
  const [siteName, setSiteName] = useState("");
  const [isPublishing, setIsPublishing] = useState(false);
  const [isModelLoading, setIsModelLoading] = useState(true);
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const model = useRef<CodeGenerationModel>(CodeGenerationModel.getInstance());
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const loadModel = async () => {
      await model.current.waitForLoad();
      setIsModelLoading(false);
    };
    
    loadModel();
  }, []);
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —á–∞—Ç–∞
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };
  
  useEffect(() => {
    scrollToBottom();
  }, [messages]);
  
  // –≠–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  useEffect(() => {
    if (isGenerating) {
      const interval = setInterval(() => {
        setProgressValue((prev) => {
          if (prev >= 100) {
            clearInterval(interval);
            return 100;
          }
          return prev + 2;
        });
      }, 300);
      
      return () => clearInterval(interval);
    }
  }, [isGenerating]);
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (isGenerating && progressValue >= 30 && progressValue <= 85) {
      const generateSiteContent = async () => {
        try {
          // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç –º–æ–¥–µ–ª–∏
          const title = extractTitle(input);
          setSiteName(title);
          
          // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML, CSS –∏ JS
          const html = await model.current.generateHTML(input);
          addMessage("assistant", "–ì–µ–Ω–µ—Ä–∏—Ä—É—é HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–π—Ç–∞...");
          
          if (progressValue >= 50) {
            const css = await model.current.generateCSS(input);
            addMessage("assistant", "–°–æ–∑–¥–∞—é —Å—Ç–∏–ª–∏ –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ...");
            
            if (progressValue >= 70) {
              const js = await model.current.generateJS();
              addMessage("assistant", "–î–æ–±–∞–≤–ª—è—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å...");
              
              if (progressValue >= 85) {
                addMessage("assistant", "–°–∞–π—Ç –≥–æ—Ç–æ–≤! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–¥, –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ–≥–æ.");
                
                // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é —Å–∞–π—Ç–∞
                const randomId = Date.now().toString();
                setSitePreview({
                  id: randomId,
                  title: title,
                  description: input.substring(0, 100) + "...",
                  domain: generateDomain(title),
                  htmlContent: html,
                  cssContent: css,
                  jsContent: js,
                  colors: extractColors(css),
                  published: false
                });
                
                // –ó–∞–≤–µ—Ä—à–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ 100%
                if (progressValue >= 95) {
                  setIsGenerating(false);
                }
              }
            }
          }
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", error);
          addMessage("assistant", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
          setIsGenerating(false);
        }
      };
      
      generateSiteContent();
    }
  }, [isGenerating, progressValue, input]);
  
  const addMessage = (role: "user" | "assistant", content: string) => {
    const newMessage: Message = {
      id: Date.now().toString(),
      role,
      content,
      timestamp: new Date()
    };
    
    setMessages(prev => [...prev, newMessage]);
  };
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!input.trim() || isGenerating || isModelLoading) return;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addMessage("user", input);
    
    // –ù–∞—á–∏–Ω–∞–µ–º "–≥–µ–Ω–µ—Ä–∞—Ü–∏—é"
    setIsGenerating(true);
    setProgressValue(0);
    setGenerationStep(0);
    setSitePreview(null);
    
    setInput("");
  };
  
  const copyCode = () => {
    if (!sitePreview) return;
    
    let codeToCopy = "";
    
    switch (activeTab) {
      case "html":
        codeToCopy = sitePreview.htmlContent;
        break;
      case "css":
        codeToCopy = sitePreview.cssContent;
        break;
      case "js":
        codeToCopy = sitePreview.jsContent;
        break;
      default:
        codeToCopy = sitePreview.htmlContent;
    }
    
    navigator.clipboard.writeText(codeToCopy);
    setShowCopied(true);
    setTimeout(() => setShowCopied(false), 2000);
  };
  
  const publishSite = async () => {
    if (!sitePreview) return;
    
    setIsPublishing(true);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    setTimeout(() => {
      setSitePreview(prev => {
        if (prev) {
          return { ...prev, published: true };
        }
        return prev;
      });
      setIsPublishing(false);
      addMessage("assistant", `–í–∞—à —Å–∞–π—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ –∞–¥—Ä–µ—Å—É ${sitePreview.domain}.demlite.site! –¢–µ–ø–µ—Ä—å –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.`);
    }, 3000);
  };
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  const extractTitle = (prompt: string): string => {
    const titleMatch = prompt.match(/([a-z–∞-—è—ë\s]+)/i);
    return titleMatch ? titleMatch[0].trim() : "–ú–æ–π —Å–∞–π—Ç";
  };
  
  const generateDomain = (title: string): string => {
    // –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –¥–æ–º–µ–Ω
    const transliterated = title
      .toLowerCase()
      .replace(/[^a-z–∞-—è—ë0-9\s]/g, '')
      .replace(/\s+/g, '-')
      .replace(/[–∞-—è—ë]/g, char => {
        const cyrillicToLatin: Record<string, string> = {
          '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
          '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
          '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
          '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch', '—ä': '',
          '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
        };
        return cyrillicToLatin[char] || char;
      });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ö—ç—à –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    const randomHash = Math.random().toString(36).substring(2, 7);
    return `${transliterated}-${randomHash}`;
  };
  
  const extractColors = (css: string): string[] => {
    const colorRegex = /#([0-9A-F]{3}){1,2}/ig;
    const matches = css.match(colorRegex) || [];
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 3)
    return [...new Set(matches)].slice(0, 3);
  };
  
  const renderPreviewIframe = () => {
    if (!sitePreview) return null;
    
    // –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è iframe
    const htmlContent = `
      ${sitePreview.htmlContent}
      <style>${sitePreview.cssContent}</style>
      <script>${sitePreview.jsContent}</script>
    `;
    
    return (
      <iframe
        title="Site Preview"
        className="w-full h-full border-0"
        srcDoc={htmlContent}
      />
    );
  };
  
  return (
    <div className="min-h-screen flex flex-col">
      <Navbar />
      <main className="flex-1 container py-8">
        <h1 className="text-3xl font-bold mb-8">–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞ —Å –ò–ò</h1>
        
        <div className="grid md:grid-cols-5 gap-6">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: —á–∞—Ç —Å –ò–ò */}
          <div className="md:col-span-3 space-y-4">
            <Card className="border-primary/20">
              <CardContent className="p-6">
                <div className="flex items-center gap-2 mb-4">
                  <Sparkles className="h-5 w-5 text-primary" />
                  <h2 className="text-xl font-semibold">–ß–∞—Ç —Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–æ–º</h2>
                </div>
                
                <div className="bg-muted/50 rounded-lg p-4 mb-4 h-[400px] overflow-y-auto">
                  {messages.length === 0 ? (
                    <div className="text-center text-muted-foreground py-20">
                      <Sparkles className="h-8 w-8 mx-auto mb-4 text-primary/50" />
                      <p>–û–ø–∏—à–∏—Ç–µ —Å–∞–π—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å...</p>
                      <p className="text-sm mt-2">–ù–∞–ø—Ä–∏–º–µ—Ä: "–°–æ–∑–¥–∞–π –ª–µ–Ω–¥–∏–Ω–≥ –¥–ª—è –∫–æ—Ñ–µ–π–Ω–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –º–µ–Ω—é –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º–æ–π"</p>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      {messages.map((message) => (
                        <div 
                          key={message.id}
                          className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}
                        >
                          <div 
                            className={`max-w-[80%] p-3 rounded-lg ${
                              message.role === "user" 
                                ? "bg-primary text-primary-foreground" 
                                : "bg-muted"
                            }`}
                          >
                            {message.content}
                          </div>
                        </div>
                      ))}
                      <div ref={messagesEndRef} />
                    </div>
                  )}
                </div>
                
                {isGenerating && (
                  <div className="mb-4">
                    <div className="flex justify-between text-sm mb-1">
                      <span>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–π—Ç–∞...</span>
                      <span>{progressValue}%</span>
                    </div>
                    <Progress value={progressValue} className="h-2" />
                  </div>
                )}
                
                <form onSubmit={handleSubmit} className="flex gap-2">
                  <Textarea 
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    placeholder="–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Å–∞–π—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å..."
                    className="min-h-[80px] resize-none"
                    disabled={isGenerating || isModelLoading}
                  />
                  <Button 
                    type="submit" 
                    size="icon" 
                    className="h-auto"
                    disabled={isGenerating || !input.trim() || isModelLoading}
                  >
                    {isModelLoading ? (
                      <Loader2 className="h-5 w-5 animate-spin" />
                    ) : (
                      <Send className="h-5 w-5" />
                    )}
                  </Button>
                </form>
                
                {isModelLoading && (
                  <div className="mt-2 text-xs text-muted-foreground flex items-center gap-1">
                    <Loader2 className="h-3 w-3 animate-spin" />
                    <span>–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...</span>
                  </div>
                )}
              </CardContent>
            </Card>
            
            <div className="flex gap-2 flex-wrap">
              <Button 
                variant="outline" 
                size="sm" 
                className="text-xs"
                onClick={() => setInput("–°–æ–∑–¥–∞–π –ª–µ–Ω–¥–∏–Ω–≥ –¥–ª—è –∫–æ—Ñ–µ–π–Ω–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –º–µ–Ω—é –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º–æ–π")}
                disabled={isGenerating || isModelLoading}
              >
                –õ–µ–Ω–¥–∏–Ω–≥ –¥–ª—è –∫–æ—Ñ–µ–π–Ω–∏
              </Button>
              <Button 
                variant="outline" 
                size="sm" 
                className="text-xs"
                onClick={() => setInput("–°–¥–µ–ª–∞–π –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ —Å –≥–∞–ª–µ—Ä–µ–µ–π –∏ –æ—Ç–∑—ã–≤–∞–º–∏")}
                disabled={isGenerating || isModelLoading}
              >
                –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
              </Button>
              <Button 
                variant="outline" 
                size="sm" 
                className="text-xs"
                onClick={() => setInput("–†–∞–∑—Ä–∞–±–æ—Ç–∞–π —Å–∞–π—Ç –¥–ª—è IT-–∫–æ–º–ø–∞–Ω–∏–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —É—Å–ª—É–≥")}
                disabled={isGenerating || isModelLoading}
              >
                –°–∞–π—Ç IT-–∫–æ–º–ø–∞–Ω–∏–∏
              </Button>
            </div>
          </div>
          
          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
          <div className="md:col-span-2">
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center gap-2 mb-4">
                  <Globe className="h-5 w-5 text-primary" />
                  <h2 className="text-xl font-semibold">–†–µ–∑—É–ª—å—Ç–∞—Ç</h2>
                </div>
                
                {sitePreview ? (
                  <div className="space-y-4">
                    <div className="aspect-video bg-muted rounded-lg flex items-center justify-center overflow-hidden relative">
                      {renderPreviewIframe()}
                    </div>
                    
                    <Tabs defaultValue="preview" onValueChange={value => {
                      if (value === "code") {
                        setActiveTab("html");
                      }
                    }}>
                      <TabsList className="grid grid-cols-2 mb-4">
                        <TabsTrigger value="preview">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</TabsTrigger>
                        <TabsTrigger value="code">–ö–æ–¥</TabsTrigger>
                      </TabsList>
                      
                      <TabsContent value="preview" className="space-y-4">
                        <div>
                          <div className="flex justify-between mb-2">
                            <div className="text-sm font-medium">–ù–∞–∑–≤–∞–Ω–∏–µ</div>
                            <div className="max-w-[200px] truncate">{sitePreview.title}</div>
                          </div>
                          <Separator />
                        </div>
                        
                        {sitePreview.published && (
                          <div>
                            <div className="flex justify-between mb-2">
                              <div className="text-sm font-medium">–î–æ–º–µ–Ω</div>
                              <a 
                                href={`https://${sitePreview.domain}.demlite.site`}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="text-primary hover:underline flex items-center gap-1"
                              >
                                {sitePreview.domain}.demlite.site
                                <ExternalLink className="h-3 w-3" />
                              </a>
                            </div>
                            <Separator />
                          </div>
                        )}
                        
                        <div>
                          <div className="flex justify-between mb-2">
                            <div className="text-sm font-medium">–¶–≤–µ—Ç–∞</div>
                            <div className="flex gap-1">
                              {sitePreview.colors.map((color, i) => (
                                <Popover key={i}>
                                  <PopoverTrigger>
                                    <div 
                                      className="w-5 h-5 rounded-full border cursor-pointer" 
                                      style={{ backgroundColor: color }}
                                    />
                                  </PopoverTrigger>
                                  <PopoverContent className="w-auto p-2">
                                    {color}
                                  </PopoverContent>
                                </Popover>
                              ))}
                            </div>
                          </div>
                          <Separator />
                        </div>
                        
                        <div>
                          <div className="flex justify-between mb-2">
                            <div className="text-sm font-medium">–°—Ç–∞—Ç—É—Å</div>
                            <Badge variant={sitePreview.published ? "success" : "outline"}>
                              {sitePreview.published ? "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω" : "–ß–µ—Ä–Ω–æ–≤–∏–∫"}
                            </Badge>
                          </div>
                          <Separator />
                        </div>
                        
                        <div className="flex gap-2">
                          {sitePreview.published ? (
                            <Button 
                              className="flex-1 gap-2"
                              onClick={() => {
                                window.open(`https://${sitePreview.domain}.demlite.site`, "_blank");
                              }}
                            >
                              <ExternalLink className="h-4 w-4" /> –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç
                            </Button>
                          ) : (
                            <Button 
                              className="flex-1 gap-2"
                              onClick={publishSite}
                              disabled={isPublishing}
                            >
                              {isPublishing ? (
                                <>
                                  <Loader2 className="h-4 w-4 animate-spin" /> –ü—É–±–ª–∏–∫–∞—Ü–∏—è...
                                </>
                              ) : (
                                <>
                                  <Globe className="h-4 w-4" /> –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
                                </>
                              )}
                            </Button>
                          )}
                          
                          <Button 
                            variant="outline" 
                            className="flex-1 gap-2"
                            onClick={() => {
                              // –°–±—Ä–æ—Å –≤—Å–µ–≥–æ
                              setMessages([]);
                              setSitePreview(null);
                            }}
                          >
                            <RefreshCw className="h-4 w-4" /> –ù–æ–≤—ã–π —Å–∞–π—Ç
                          </Button>
                        </div>
                      </TabsContent>
                      
                      <TabsContent value="code">
                        <Tabs defaultValue="html" onValueChange={setActiveTab}>
                          <TabsList className="mb-2">
                            <TabsTrigger value="html">HTML</TabsTrigger>
                            <TabsTrigger value="css">CSS</TabsTrigger>
                            <TabsTrigger value="js">JavaScript</TabsTrigger>
                          </TabsList>
                        </Tabs>
                        
                        <div className="relative">
                          <pre className="bg-muted p-4 rounded-lg text-xs overflow-auto max-h-[300px]">
                            <code>
                              {activeTab === "html" && sitePreview.htmlContent}
                              {activeTab === "css" && sitePreview.cssContent}
                              {activeTab === "js" && sitePreview.jsContent}
                            </code>
                          </pre>
                          <Button 
                            size="sm" 
                            variant="secondary" 
                            className="absolute top-2 right-2 gap-1"
                            onClick={copyCode}
                          >
                            {showCopied ? (
                              <>
                                <Check className="h-3 w-3" /> –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ
                              </>
                            ) : (
                              <>
                                <Copy className="h-3 w-3" /> –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                              </>
                            )}
                          </Button>
                        </div>
                      </TabsContent>
                    </Tabs>
                  </div>
                ) : (
                  <div className="bg-muted/50 rounded-lg p-8 text-center text-muted-foreground">
                    <Code className="h-12 w-12 mx-auto mb-4 text-primary/30" />
                    <h3 className="text-lg font-medium mb-2">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤</h3>
                    <p className="mb-4">–û–ø–∏—à–∏—Ç–µ –≤–∞—à —Å–∞–π—Ç –≤ —á–∞—Ç–µ –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –µ–≥–æ –¥–ª—è –≤–∞—Å</p>
                    <Button 
                      variant="outline" 
                      className="gap-2"
                      onClick={() => {
                        if (!isGenerating && messages.length > 0) {
                          // –°–±—Ä–æ—Å —á–∞—Ç–∞
                          setMessages([]);
                        }
                      }}
                      disabled={isGenerating || messages.length === 0}
                    >
                      <RefreshCw className="h-4 w-4" /> –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö */}
        <div className="mt-16">
          <h2 className="text-2xl font-bold mb-8 text-center">–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –ø—É–±–ª–∏–∫—É–π—Ç–µ —Å–∞–π—Ç—ã —Å DEMLITE SITES</h2>
          <div className="grid md:grid-cols-3 gap-8">
            <Card>
              <CardContent className="p-6">
                <div className="h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center mx-auto mb-4">
                  <Sparkles className="h-6 w-6 text-primary" />
                </div>
                <h3 className="text-xl font-semibold text-center mb-2">–û–ø–∏—à–∏—Ç–µ –≤–∞—à —Å–∞–π—Ç</h3>
                <p className="text-muted-foreground text-center">
                  –ü—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π —Å–∞–π—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å. –ù–∞—à –ò–ò –ø–æ–π–º–µ—Ç –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç –∏—Ö –≤ —Ä–∞–±–æ—á–∏–π –∫–æ–¥.
                </p>
              </CardContent>
            </Card>
            
            <Card>
              <CardContent className="p-6">
                <div className="h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center mx-auto mb-4">
                  <Code className="h-6 w-6 text-primary" />
                </div>
                <h3 className="text-xl font-semibold text-center mb-2">–ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –∫–æ–¥</h3>
                <p className="text-muted-foreground text-center">
                  –ù–∞—à –ò–ò —Å–æ–∑–¥–∞—Å—Ç —á–∏—Å—Ç—ã–π, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π HTML, CSS –∏ JavaScript –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å.
                </p>
              </CardContent>
            </Card>
            
            <Card>
              <CardContent className="p-6">
                <div className="h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center mx-auto mb-4">
                  <Globe className="h-6 w-6 text-primary" />
                </div>
                <h3 className="text-xl font-semibold text-center mb-2">–û–ø—É–±–ª–∏–∫—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ</h3>
                <p className="text-muted-foreground text-center">
                  –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ —Å–≤–æ–π —Å–∞–π—Ç —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–æ–¥–¥–æ–º–µ–Ω–æ–º yoursite.demlite.site –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
                </p>
              </CardContent>
            </Card>
          </div>
        </div>
      </main>
      <Footer />
    </div>
  );
};

export default CreateSite;
